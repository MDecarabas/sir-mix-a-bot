#! /usr/bin/env python

import rospy
import actionlib
import actionlib_msgs
import sys
from moveit_commander import RobotCommander, PlanningSceneInterface, roscpp_initialize, roscpp_shutdown, MoveGroupCommander
from geometry_msgs.msg import PoseStamped, Pose
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from moveit_msgs.msg import MoveItErrorCodes
from moveit_commander.conversions import pose_to_list
from math import pi
from std_srvs.srv import Empty, EmptyResponse, SetBool, SetBoolResponse
from actionlib_msgs.msg import GoalStatusArray


class mover():
    """
    The gripper class looks at fine control of the gripper - i.e. it pours the drink, shakes the drink cup 
    """

    def __init__(self):
        self.scene = moveit_commander.PlanningSceneInterface()
        self.robot = moveit_commander.RobotCommander()

        self.group_name = "panda_arm"

        self.move_group = moveit_commander.MoveGroupCommander(self.group_name)
        self.move_gripper = moveit_commander.MoveGroupCommander('hand')

        display_trajectory_publisher = rospy.Publisher('/move_group/display_planned_path', moveit_msgs.msg.DisplayTrajectory, queue_size=20)
        
        #self.planning_frame = planning_frame

        self.gripper_tilt()
        #self.grippertip()

    
    def gripper_tilt(self):

        init = self.move_group.get_current_pose()
        x = init.pose.position.x
        y = init.pose.position.y
        z = init.pose.position.z 

        x_pose = init.pose.orientation.x
        y_pose = init.pose.orientation.y 
        z_pose = init.pose.orientation.z 
        w_pose = init.pose.orientation.w 

        self.move_group.shift_pose_target(2, 0.125)
        success, traj_msg, planTime, err = self.move_group.plan()
        self.move_group.execute(traj_msg, wait=True)

        pose_goal = Pose()
        pose_goal.position.x = x - 0.05
        pose_goal.position.y = y 
        pose_goal.position.z = z
        pose_goal.orientation.w = w_pose 


        self.move_group.set_pose_target(pose_goal)
        success,traj,pose_time,errorcode = self.move_group.plan()

        #self.move_group.go(pose_goal,wait=True)
        #self.move_group.stop()
        #self.move_group.clear_pose_targets()



        print (">>>> Printing robot pose")
        print (self.move_group.get_current_pose())

        joint_goal = self.move_group.get_current_joint_values()
        joint_goal[5] = joint_goal[5]+pi/6
        self.move_group.go(joint_goal, wait=True)
        self.move_group.stop()


        current = self.move_group.get_current_pose()
        xCurrent = current.pose.position.x
        yCurrent = current.pose.position.y
        zCurrent = current.pose.position.z 

        x_poseCurrent = current.pose.orientation.x
        y_poseCurrent = current.pose.orientation.y 
        z_poseCurrent = current.pose.orientation.z 
        w_poseCurrent = current.pose.orientation.w 

        print (">>>> Printing robot pose")
        print (self.move_group.get_current_pose())

        self.move_group.shift_pose_target(0, -0.5)
        success, traj_msg, planTime, err = self.move_group.plan()
        self.move_group.execute(traj_msg, wait=True)
        
        
if __name__ == "__main__":
    rospy.init_node("gripper") #Initialize the node
    rospy.wait_for_message('move_group/status', GoalStatusArray)
    Mover = mover()




