#!/usr/bin/env python3
""" 
Node for adding objects marked by apriltags or color detection to planning scene

SERVICES:
  + update_scene/refresh (final_project_mixotics/Refresh) - refreshes scene with updated dynamic object positions and returns whether or not all objects were detected
  + update_scene/static (final_project_mixotics/Refresh) - refreshes scene with updated static object positions and returns whether or not all objects were detected
"""
import sys
import rospy
import tf2_ros
import moveit_commander
import json
from geometry_msgs.msg import PoseStamped, TransformStamped, Quaternion
from final_project_mixotics.srv import Refresh
from tf_conversions import transformations
from math import pi
from rospkg import RosPack

class SceneUpdater:
    """
    Updates poses of scene objects using apriltag or color detection and known object geometries
    """
    def __init__(self):
        # Check for parameters
        self.i_list = rospy.get_param("/ingredient_list", [])
        self.c_list = rospy.get_param("/coaster_list", [])
        self.t_list = rospy.get_param("/table_list", [])
        self.b_h = rospy.get_param("/bottle_height", 0.1215)
        self.b_r = rospy.get_param("/bottle_radius", 0.024)
        self.c_d = rospy.get_param("/coaster_dim", 0.04)
        self.t_d = rospy.get_param("/table_dim", [[]])
        self.color = rospy.get_param("/use_color", False)
        self.camera_frame = rospy.get_param("/camera_frame", "camera")

        # Find model file for squeeze bottle and compute static transform
        if self.color:
            self.stl = RosPack().get_path("final_project_mixotics") + "/models/squeeze_bottle_v2.STL"
        else:
            self.stl = RosPack().get_path("final_project_mixotics") + "/models/squeeze_bottle_tag_v2.STL"

        moveit_commander.roscpp_initialize(sys.argv)
        rospy.init_node('update_scene')

        # Define scene and robot planning frame
        self.scene = moveit_commander.PlanningSceneInterface()
        self.frame_id = "world"

        # Define services and associated proxies
        self.update_scene = rospy.Service("update_scene/refresh", Refresh, self.scene_callback)
        self.update_fixed = rospy.Service("update_scene/fixed", Refresh, self.fixed_callback)
        
        # Create static broadcaster and define transform between static robot tag and camera
        self.static_broadcaster = tf2_ros.StaticTransformBroadcaster()
        self.tag_camera_tf = TransformStamped()
        self.tag_camera_tf.header.frame_id = "panda_tag_static"
        self.tag_camera_tf.child_frame_id = self.camera_frame

        # Create buffer to store tf data
        self.buffer = tf2_ros.Buffer()

        # Create tf listener
        self.listener = tf2_ros.TransformListener(self.buffer)


    def scene_callback(self, req):
        """
        Callback for update_scene/refresh service (generates dynamic planning scene objects (i.e., ingredients, coasters) based on apriltag or color tf)
        """
        # Check transform from robot tag to camera and set static robot tag frame
        self.tag_check = {}
        self.tag_bool = []
        try:
            # Lookup latest transform between robot tag and camera
            trans = self.buffer.lookup_transform("panda_tag", self.camera_frame, rospy.Time())

            # Check if transform is out-of-date (> 1.5 seconds since new transform)
            if ((rospy.Time.now().to_sec() - trans.header.stamp.secs) > 1.5):
                self.tag_check["panda_tag"] = False
                self.tag_bool.append(False)
            else:
                self.tag_check["panda_tag"] = True
                self.tag_bool.append(True)

            rospy.loginfo("panda_tag transform is: " + str(trans))
            
            # Set static transform equal to robot tag transform
            self.tag_camera_tf.transform = trans.transform
            self.tag_camera_tf.header.stamp = rospy.Time.now()
            self.static_broadcaster.sendTransform(self.tag_camera_tf)

        except tf2_ros.LookupException as e:
            # Frames do not exist yet
            rospy.loginfo("panda_tag lookup exception: " + str(e))
            self.tag_check["panda_tag"] = False
            self.tag_bool.append(False)

        except tf2_ros.ConnectivityException as e:
            # Disconnection in the tf tree
            rospy.loginfo("panda_tag connectivity exception: " + str(e))
            self.tag_check["panda_tag"] = False
            self.tag_bool.append(False)

        except tf2_ros.ExtrapolationException as e:
            # Issue in extrapolation between times
            rospy.loginfo("panda_tag extrapolation exception: " + str(e))
            self.tag_check["panda_tag"] = False
            self.tag_bool.append(False)

        # Check for transforms between world and ingredients
        self.obj_list = self.scene.get_known_object_names()
        for i_name in self.i_list:

            if i_name in self.obj_list:
                self.scene.remove_world_object(name=i_name)
            
            try:
                # Lookup latest transform between world and ingredient list
                trans = self.buffer.lookup_transform("world", i_name + "_tag", rospy.Time())

                # Check if transform is out-of-date (> 1.5 seconds since new transform)
                if ((rospy.Time.now().to_sec() - trans.header.stamp.secs) > 1.5):
                    self.tag_check[i_name + "_tag"] = False
                    self.tag_bool.append(False)
                else:
                    self.tag_check[i_name + "_tag"] = True
                    self.tag_bool.append(True)
                    
                    obj = PoseStamped()
                    obj.header.frame_id = self.frame_id
                    obj.pose.position.x = trans.transform.translation.x
                    obj.pose.position.y = trans.transform.translation.y
                    obj.pose.position.z = trans.transform.translation.z - (0.5*self.b_h) - (0.5*0.0025)# bottle center is offset by height of the bottle and apriltag

                    if self.color:
                        obj.pose.position.z = trans.transform.translation.z # bottle center is marked by tape
                        quat = transformations.quaternion_from_euler(0, 0, -pi/2) # correct bottle pitch based on .stl file
                    else:
                        quat = (trans.transform.rotation.x, trans.transform.rotation.y, trans.transform.rotation.z, trans.transform.rotation.w)
                    
                    obj.pose.orientation = Quaternion(*quat)
                    #self.scene.add_cylinder(i_name, obj, height=self.b_h, radius=self.b_r)
                    self.scene.add_mesh(i_name, obj, self.stl, size=(1,1,1))

                rospy.loginfo(i_name + "_tag transform is: " + str(trans))

            except tf2_ros.LookupException as e:
                # Frames do not exist yet
                rospy.loginfo(i_name + "_tag lookup exception: " + str(e))

                self.tag_check[i_name + "_tag"] = False
                self.tag_bool.append(False)

            except tf2_ros.ConnectivityException as e:
                # Disconnection in the tf tree
                rospy.loginfo(i_name + "_tag connectivity exception: " + str(e))
                
                self.tag_check[i_name + "_tag"] = False
                self.tag_bool.append(False)

            except tf2_ros.ExtrapolationException as e:
                # Issue in extrapolation between times
                rospy.loginfo(i_name + "_tag extrapolation exception: " + str(e))

                self.tag_check[i_name + "_tag"] = False
                self.tag_bool.append(False)
        
        # Check for transforms between world and coasters
        for c_name in self.c_list:

            if c_name in self.obj_list:
                self.scene.remove_world_object(name=c_name)
            
            try:
                # Lookup latest transform between world and ingredient list
                trans = self.buffer.lookup_transform("world", c_name + "_tag", rospy.Time())

                # Check if transform is out-of-date (> 1.5 seconds since new transform)
                if ((rospy.Time.now().to_sec() - trans.header.stamp.secs) > 1.5):
                    self.tag_check[c_name + "_tag"] = False
                    self.tag_bool.append(False)
                else:
                    self.tag_check[c_name + "_tag"] = True
                    self.tag_bool.append(True)
                    
                    obj = PoseStamped()
                    obj.header.frame_id = self.frame_id
                    obj.pose.position.x = trans.transform.translation.x
                    obj.pose.position.y = trans.transform.translation.y
                    obj.pose.position.z = trans.transform.translation.z - (0.5*0.0025) # offset for coaster

                    quat = (trans.transform.rotation.x, trans.transform.rotation.y, trans.transform.rotation.z, trans.transform.rotation.w)
                    obj.pose.orientation = Quaternion(*quat)

                    self.scene.add_box(c_name, obj, size=(self.c_d, self.c_d, 0.0025))

                rospy.loginfo(c_name + "_tag transform is: " + str(trans))

            except tf2_ros.LookupException as e:
                # Frames do not exist yet
                rospy.loginfo(c_name + "_tag lookup exception: " + str(e))

                self.tag_check[c_name + "_tag"] = False
                self.tag_bool.append(False)

            except tf2_ros.ConnectivityException as e:
                # Disconnection in the tf tree
                rospy.loginfo(c_name + "_tag connectivity exception: " + str(e))
                
                self.tag_check[c_name + "_tag"] = False
                self.tag_bool.append(False)

            except tf2_ros.ExtrapolationException as e:
                # Issue in extrapolation between times
                rospy.loginfo(c_name + "_tag extrapolation exception: " + str(e))

                self.tag_check[c_name + "_tag"] = False
                self.tag_bool.append(False)
        
        return [all(self.tag_bool), json.dumps(self.tag_check)]


    def fixed_callback(self, req):
        """
        Callback for update_scene/fixed service (generates fixed planning scene objects (i.e., tables, panda_tag) based on apriltag tf)
        """
        # Check transform from robot tag to camera and set static robot tag frame
        self.tag_check = {}
        self.tag_bool = []
        try:
            # Lookup latest transform between robot tag and camera
            trans = self.buffer.lookup_transform("panda_tag", self.camera_frame, rospy.Time())

            # Check if transform is out-of-date (> 1.5 seconds since new transform)
            if ((rospy.Time.now().to_sec() - trans.header.stamp.secs) > 1.5):
                self.tag_check["panda_tag"] = False
                self.tag_bool.append(False)
            else:
                self.tag_check["panda_tag"] = True
                self.tag_bool.append(True)

            rospy.loginfo("panda_tag transform is: " + str(trans))
            
            # Set static transform equal to robot tag transform
            self.tag_camera_tf.transform = trans.transform
            self.tag_camera_tf.header.stamp = rospy.Time.now()
            self.static_broadcaster.sendTransform(self.tag_camera_tf)

        except tf2_ros.LookupException as e:
            # Frames do not exist yet
            rospy.loginfo("panda_tag lookup exception: " + str(e))
            self.tag_check["panda_tag"] = False
            self.tag_bool.append(False)

        except tf2_ros.ConnectivityException as e:
            # Disconnection in the tf tree
            rospy.loginfo("panda_tag connectivity exception: " + str(e))
            self.tag_check["panda_tag"] = False
            self.tag_bool.append(False)

        except tf2_ros.ExtrapolationException as e:
            # Issue in extrapolation between times
            rospy.loginfo("panda_tag extrapolation exception: " + str(e))
            self.tag_check["panda_tag"] = False
            self.tag_bool.append(False)

        # Check for transforms between world and ingredients
        self.obj_list = self.scene.get_known_object_names()
        t_n = 0
        for t_name in self.t_list:

            if t_name in self.obj_list:
                self.scene.remove_world_object(name=t_name)
            
            try:
                # Lookup latest transform between world and ingredient list
                trans = self.buffer.lookup_transform("world", t_name + "_tag", rospy.Time())

                # Check if transform is out-of-date (> 1.5 seconds since new transform)
                if ((rospy.Time.now().to_sec() - trans.header.stamp.secs) > 1.5):
                    self.tag_check[t_name + "_tag"] = False
                    self.tag_bool.append(False)
                else:
                    self.tag_check[t_name + "_tag"] = True
                    self.tag_bool.append(True)
                    
                    obj = PoseStamped()
                    obj.header.frame_id = self.frame_id
                    obj.pose.position.x = trans.transform.translation.x
                    obj.pose.position.y = trans.transform.translation.y
                    obj.pose.position.z = trans.transform.translation.z - (0.5 * t_d[t_n][2])

                    quat = (trans.transform.rotation.x, trans.transform.rotation.y, trans.transform.rotation.z, trans.transform.rotation.w)
                    obj.pose.orientation = Quaternion(*quat)

                    self.scene.add_box(c_name, obj, size=(t_d[t_n][0], t_d[t_n][1], t_d[t_n][2]))

                rospy.loginfo(t_name + "_tag transform is: " + str(trans))

            except tf2_ros.LookupException as e:
                # Frames do not exist yet
                rospy.loginfo(t_name + "_tag lookup exception: " + str(e))

                self.tag_check[t_name + "_tag"] = False
                self.tag_bool.append(False)

            except tf2_ros.ConnectivityException as e:
                # Disconnection in the tf tree
                rospy.loginfo(t_name + "_tag connectivity exception: " + str(e))
                
                self.tag_check[t_name + "_tag"] = False
                self.tag_bool.append(False)

            except tf2_ros.ExtrapolationException as e:
                # Issue in extrapolation between times
                rospy.loginfo(t_name + "_tag extrapolation exception: " + str(e))

                self.tag_check[t_name + "_tag"] = False
                self.tag_bool.append(False)
            
            t_n += 1 # counter for table number
        
        return [all(self.tag_bool), json.dumps(self.tag_check)]

def main():
    """
    Creates the update_scene node and keeps it alive until shutdown
    """
    n = SceneUpdater()
    rospy.spin()

if __name__ == "__main__":
    main()