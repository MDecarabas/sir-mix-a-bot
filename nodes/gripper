#! /usr/bin/env python

import rospy
import actionlib
import actionlib_msgs

from franka_gripper.msg import HomingAction, HomingGoal, MoveGoal, MoveAction

import sys
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from moveit_msgs.msg import MoveItErrorCodes
from moveit_commander.conversions import pose_to_list
from math import pi
from std_srvs.srv import Empty, EmptyResponse, SetBool, SetBoolResponse


class gripper():
    """
    The gripper class looks at fine control of the gripper - i.e. it pours the drink, shakes the drink cup 
    """

    def __init__(self):
        self.scene = moveit_commander.PlanningSceneInterface()
        self.robot = moveit_commander.RobotCommander()

        self.move_group = moveit_commander.MoveGroupCommander(self.group_name)
        self.move_gripper = moveit_commander.MoveGroupCommander('interbotix_gripper')

        self.group_name = "hand"
        self.group = moveit_commander.MoveGroupCommander(self.group_name)
        display_trajectory_publisher = rospy.Publisher('/move_group/display_planned_path', moveit_msgs.msg.DisplayTrajectory, queue_size=20)
        
        self.moveit_gripper_open()

    def gripper_home(self):
        self.client = actionlib.SimpleActionClient('/franka_gripper/homing', HomingAction)
        self.client.wait_for_server()

        self.goal = HomingGoal()
        self.client.send_goal(self.goal)
        self.client.wait_for_result(rospy.Duration.from_sec(5.0))

        return EmptyResponse()



    def gripper_move(self,data):
        self.client = actionlib.SimpleActionClient('/franka_gripper/move', MoveAction)
        self.client.wait_for_server()
        self.goal = MoveGoal(width = 0.08, speed = 0.08)
        self.client.send_goal(self.goal)
        self.client.wait_for_result(rospy.Duration.from_sec(5.0))

        return EmptyResponse()


    def moveit_gripper_open(self):
        joint_goal = self.group.get_current_joint_values()
        joint_goal[0] = 0.03
        joint_goal[1] = 0.03
        self.group.go(joint_goal, wait=True)
        self.group.stop()

        return EmptyResponse()

    def moveit_gripper_close(self,data):
        joint_goal = self.group.get_current_joint_values()
        joint_goal[0] = data[0]
        joint_goal[1] = data[1]
        self.group.go(joint_goal, wait=True)
        self.group.stop()

        return EmptyResponse()

    def moveit_pose(self,pose):
        pose_goal = geometry_msgs.msg.Pose()
        pose_goal.orientation.w = pose[0]
        pose_goal.position.x = pose[1]
        pose_goal.position.y = pose[2]
        pose_goal.position.z = pose[3]
        self.group.set_pose_target(pose_goal)
        plan = self.group.go(wait=True)
        self.group.stop()
        self.group.clear_pose_targets()

        return EmptyResponse()




    if __name__ == "__main__":
        rospy.init_node("gripper") #Initialize the node
        gripper = gripper()
        rospy.spin() #Keep running 
        pass
