#!/usr/bin/env python3

""" 

"""
import rospy
from std_msgs.msg import String
from enum import Enum, auto
import math
from std_srvs.srv import Empty, EmptyResponse
import tf2_ros
import geometry_msgs.msg
from tf_conversions import transformations
from homework2.compute import FigureEight, Kinematics

class State(Enum):
    """
    Specifies the state of the control loop (either idle, request, listen or confirm)
    """
    IDLE = auto()
    REQUEST = auto()
    LISTEN = auto()
    CONFIRM = auto()

class Voice:

    def __init__(self):
        self.sub = rospy.Subscriber('speech_recognition/final_result', String, self.subscriber_callback)
        self.pub = rospy.Publisher('tts/phrase', String, queue_size=10)
        self.voice_text = None
        self.menu = rospy.get_param('/drinks')

        self.state = State.IDLE
        self.wake = ['sir', 'mix', 'bot']

        # Main loop runs in a timer with frequency specified in launch file
        self.tmr = rospy.Timer(rospy.Duration(10), self.main_loop)
        
    def subscriber_callback(self, data):
        self.voice_text = data

    def process_text(self):
        split_text = self.voice_text.split(' ')
        order = [s for s in split_text if s in self.menu]
        return order

    def order_responses (self, order):
        if (len(order) > 0) and (len(order) =< 4):
            msg = f'To confirm, you ordered the following: {" ".join(order)}'
            self.state = State.CONFIRM
            return msg
        
        elif len(order) > 4:
            msg = f'The order limit is 4 items, please place your order again.'
            self.state = State.REQUEST
            return msg

        else:
            msg = f'Sorry, I did not catch your order. Please try again.'
            self.state = State.REQUEST
            return msg


    def wake_check(self):
        return [d for d in self.voice_text if d in self.wake] == self.wake

    
    def main_loop(self):
        """ 
        The main control loop timer callback (checks state)

        Args:
          event - A rospy.Timer event
        """
        if self.state == State.IDLE:
            if self.wake_check():
                self.state = State.REQUEST
        elif self.state == State.REQUEST:
            self.pub.publish("What would you like to drink?")
            rospy.sleep(5)
            self.state = State.LISTEN
        elif self.state == State.LISTEN:
            order = self.process_text()
            message = self.order_responses(order)
            self.pub.publish(message)
            rospy.sleep(5)
        elif self.state == State.CONFIRM:
            rospy.loginfo("call order_handler")


def main():
    """ The main() function. """
    rospy.init_node('voice')
    v = Voice()
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass