#!/usr/bin/env python

import rospy
import cv2
from sensor_msgs.msg import Image, CameraInfo
from cv_bridge import CvBridge, CvBridgeError
import numpy as np
import pyrealsense2 as rs

class Vision:
    
    def __init__(self):
        self.sub_color = rospy.Subscriber('/camera/color/image_raw', Image, self.color_callback)
        self.sub_depth = rospy.Subscriber('/camera/aligned_depth_to_color/image_raw', Image, self.depth_callback)
        self.sub_intr = rospy.Subscriber('/camera/depth/camera_info', CameraInfo, self.intr_callback)
        self.bridge = CvBridge()
        self.cx = 0
        self.cy = 0
        self.depth = None
        self.intrinsics = None

    def find_centroid(centroid_list, depth_scale):
        med_x = np.median([x[0] for x in centroid_list])
        med_y = np.median([y[1] for y in centroid_list])
        return (med_x*depth_scale, med_y*depth_scale)

    def color_callback(self, img):
        try:
            color_image = self.bridge.imgmsg_to_cv2(img, 'passthrough')
            hsv_image = cv2.cvtColor(color_image, cv2.COLOR_BGR2HSV)
        except CvBridgeError as e:
            rospy.logerr('CvBridge Error: {0}'.format(e))

        l_blue = np.array([15, 225, 20])
        u_blue = np.array([35, 255, 255])

        mask = cv2.inRange(hsv_image, l_blue, u_blue)

        res = cv2.bitwise_and(color_image, color_image, mask=mask)

        kernel = np.ones((5, 5), np.uint8)
        erode = cv2.erode(res, kernel, iterations = 1)
        dilate = cv2.dilate(erode, kernel, iterations = 1)

        contours = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)[0]

        if len(contours) > 0:
            c_max = max(contours, key=cv2.contourArea)
            m = cv2.moments(c_max)
            self.cx = int(m['m10']/(m['m00']+ 0.00001))
            self.cy = int(m['m01']/(m['m00']+ 0.00001))
            centroid_list = []
            if len(centroid_list) > 10:
                del centroid_list[0]
                centroid_list.append((self.cx, self.cy))
            else:
                centroid_list.append((self.cx, self.cy))
            cv2.drawContours(dilate, c_max, -1, (0, 255, 0), 8)
            cv2.circle(dilate, (self.cx, self.cy), 7, (255, 255, 255), 2)

            point = rs.rs2_deproject_pixel_to_point(self.intrinsics, [self.cx, self.cy], self.depth)

            # position of centroid in real world wrt camera
            # [x, y, z], with z being depth
            # from camera's perspective, left is +, up is +, 
            pos = [-point[0], -point[1], point[2]]
            rospy.logerr(pos)
                
        self.show_image(dilate, 'HSV')

    def depth_callback(self, img):
        try:
            depth_image = self.bridge.imgmsg_to_cv2(img, 'passthrough')
        except CvBridgeError as e:
            rospy.logerr('CvBridge Error: {0}'.format(e))

        self.depth = self.get_depth(self.cx, self.cy, depth_image)

    def get_depth(self, x, y, depth_image):
        dim = depth_image.shape
        if dim[1]-x < 5:
            if dim[0]-y < 5:
                depth = depth_image[y-(dim[0]-y):y+(dim[0]-y), x-(dim[1]-x):x+(dim[1]-x)]
            else:
                depth = depth_image[y-5:y+5, x-(dim[1]-x):x+(dim[1]+x)]
        elif dim[0]-y < 5:
            depth = depth_image[y-(dim[0]-y):y+(dim[0]-y), x-5:x+5]
        else:
            depth = depth_image[y-5:y+5, x-5:x+5]

        depth = np.average(depth)
        return depth

    def intr_callback(self, intr):
        intrinsics = rs.intrinsics()
        intrinsics.width = intr.width
        intrinsics.height = intr.height
        intrinsics.ppx = intr.K[2]
        intrinsics.ppy = intr.K[5]
        intrinsics.fx = intr.K[0]
        intrinsics.fy = intr.K[4]
        intrinsics.model = rs.distortion.none
        intrinsics.coeffs = [i for i in intr.D]
        self.intrinsics = intrinsics

        
        
    def show_image(self, img, img_name):
        cv2.namedWindow(img_name, 1)
        cv2.imshow(img_name, img)
        cv2.waitKey(3)

def main():
    """ The main() function. """
    rospy.init_node('vision')
    v = Vision()
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass